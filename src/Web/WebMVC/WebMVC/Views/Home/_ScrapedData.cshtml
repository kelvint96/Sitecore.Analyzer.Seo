@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model WebMVC.ViewModels.AnalyzeFormViewModel
<div>
    <h2 class="text-center">Analytics</h2>
    <hr />
</div>

<div>
    <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            @if (Model.isBodySelected)
            {
                <button class="nav-link tabbtn" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-body" type="button" role="tab" aria-controls="nav-body" aria-selected="true">Body</button>
            }
            @if (Model.isMetaSelected)
            {
                <button class="nav-link tabbtn" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-meta" type="button" role="tab" aria-controls="nav-meta" aria-selected="false">Meta</button>
            }
            @if (Model.isLinkSelected)
            {
                <button class="nav-link tabbtn" id="nav-contact-tab" data-bs-toggle="tab" data-bs-target="#nav-link" type="button" role="tab" aria-controls="nav-link" aria-selected="false">Links</button>
            }
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        @if (Model.isBodySelected)
        {
            <div class="tab-pane fade" id="nav-body" role="tabpanel" aria-labelledby="nav-home-tab">...</div>
        }
        @if (Model.isMetaSelected)
        {
            <div class="tab-pane fade" id="nav-meta" role="tabpanel" aria-labelledby="nav-profile-tab">...</div>
        }
        @if (Model.isLinkSelected)
        {
            <div class="tab-pane fade" id="nav-link" role="tabpanel" aria-labelledby="nav-contact-tab">...</div>
        }
    </div>
</div>


<script>
    if ($(".tabbtn")) {
        $(".tabbtn").first().addClass("active")
    }
    if ($(".tab-pane")) {
        $(".tab-pane").first().addClass("show active")
    }

    if (@Json.Serialize(Model.isBodySelected)) {
        $('#overlay').show()
        $.ajax({
            url: "Home/BodyData/",
            data: { text: '@Model.Text', scrapeType: '@Model.ScrapeType' },
            success: function (data) {
                $('#nav-body').html(data);
                $('#overlay').hide()
            }, error: function (event, jqxhr, settings, thrownerror) {
                debugger;
                errorFactory(event.status, event)
            }
        });
    }

    if (@Json.Serialize(Model.isMetaSelected)) {
        $('#overlay').show()
        $.ajax({
            url: "Home/MetaData/",
            data: { text: '@Model.Text', scrapeType: '@Model.ScrapeType' },
            success: function (data) {
                $('#nav-meta').html(data);
                $('#overlay').hide()
            }, error: function (event, jqxhr, settings, thrownerror) {
                errorFactory(event.status, event)
            }
        });
    }

    if (@Json.Serialize(Model.isLinkSelected)) {
        $('#overlay').show()
        $.ajax({
            url: "Home/LinkData/",
            data: {text: '@Model.Text', scrapeType: '@Model.ScrapeType' },
            success: function (data) {
                $('#nav-link').html(data);
                $('#overlay').hide()
            }, error: function (event, jqxhr, settings, thrownerror) {
                errorFactory(event.status, event)
            }
        });
    }

    var showErrorToast = (title, message) => {
        toastr["error"](message, title,
            {
                "progressBar": true,
                "positionClass": "toast-top-right",
                "showDuration": "150",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut",
                "preventDuplicates": true,
            })
    }

    var handleBadRequestError = (err) => {
        var message = err.responseJSON.errors?.Text.join('\n')
        var title = err.status + " " + err.statusText
        showErrorToast(title, message)
    }

    var handleInternalServerError = (err) => {
        var message = "Unable to connect to the input URL"
        var title = err.status + " " + err.statusText
        showErrorToast(title, message)
    }

    var handleUnknownError = (err) => {
        var message = "Unknown Error."
        var title = err.status + " " + err.statusText
        showErrorToast(title, message)
    }

    var errorFactory = (status, err) => {
        if (status === 400) {
            handleBadRequestError(err)
            return;
        }
        if (status === 500) {
            handleInternalServerError(err)
            return;
        }
        handleUnknownError(err);
    }
</script>
